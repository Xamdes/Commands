\#!/usr/bin/env bash

mkdir $1
cd $1

echo "{
  \"name\": \"$1\",
  \"version\": \"1.0.0\",
  \"description\": \"Epicodus Tutorial for creating a help queue\",
  \"main\": \"index.js\",
  \"scripts\": {
    \"build\": \"webpack --config-name production\",
    \"commit\": \"bash ./bin/commit.sh\",
    \"fresh\": \"npm install && webpack\",
    \"gen\": \"bash ./bin/generate-component.sh\",
    \"git-config\": \"bash ./bin/git-config.sh\",
    \"lint\": \"eslint \\\"src/**\\\" \\\"src/**/**\\\" || true\",
    \"lint-fix\": \"eslint \\\"src/**\\\" \\\"src/**/**\\\" --fix || true\",
    \"start\": \"webpack-dev-server --config-name dev-server\",
    \"start-web\": \"webpack-dev-server --config-name dev-server --open\",
    \"web\": \"open http://localhost:8080\",
    \"webpack\": \"webpack\",
    \"webpack-dev-server\": \"webpack-dev-server\"
  },
  \"author\": \"Jane Doe\",
  \"license\": \"MIT\",
  \"dependencies\": {
    \"ajv\": \"^6.5.3\",
    \"bootstrap\": \"^4.1.3\",
    \"@babel/polyfill\": \"^7.0.0\",
    \"fetch\": \"^1.1.0\",
    \"isomorphic-fetch\": \"^2.2.1\",
    \"jquery\": \"^3.3.1\",
    \"popper.js\": \"^1.14.4\",
    \"prop-types\": \"^15.5.10\",
    \"react\": \"^15.5.4\",
    \"react-dom\": \"^15.5.4\",
    \"react-router-dom\": \"^4.0.0\",
    \"styled-components\": \"^3.4.5\",
    \"styled-jsx\": \"^3.0.2\",
    \"uuid\": \"^3.3.2\",
    \"webpack\": \"^4.17.2\"
  },
  \"devDependencies\": {
    \"@babel/cli\": \"^7.0.0\",
    \"@babel/core\": \"^7.0.0\",
    \"@babel/preset-env\": \"^7.0.0\",
    \"@babel/preset-react\": \"^7.0.0\",
    \"babel-loader\": \"^8.0.2\",
    \"css-loader\": \"^1.0.0\",
    \"eslint\": \"^5.5.0\",
    \"eslint-loader\": \"^2.1.0\",
    \"eslint-plugin-react\": \"^7.11.1\",
    \"html-webpack-plugin\": \"^3.2.0\",
    \"react-hot-loader\": \"^3.0.0-beta.7\",
    \"style-loader\": \"^0.23.0\",
    \"uglifyjs-webpack-plugin\": \"^2.0.1\",
    \"webpack-cli\": \"^3.1.0\",
    \"webpack-dev-server\": \"^3.1.7\"
  }
}
" > package.json

mkdir bin

echo "#!/usr/bin/env bash

git add .
git commit -m \"\$1\"
" > ./bin/commit.sh

echo "#!/usr/bin/env bash
PREPEND=\${2:-false}

cd ./src/components

echo \"// Autogenerated using npm run gen \$1
/*
* Copy to other files
* import \$1 from './\$1';
* <\$1/>
*/
import styled from 'styled-components';
// import PropTypes from 'prop-types';
// import { Link, Switch, Route } from 'react-router-dom';

function \$1(){
  return (
    <Main>
      <h1>\$1 Component Created Successfully</h1>
    </Main>
  );
}

/*
\$1.propTypes = {
  //  [variable-name]: PropTypes.[type],
};
*/

export default \$1;

const Main = styled.div\\\`
background-color: black;
font-family: sans-serif;
padding-top: 50px;
color: white;
\\\`;

\" > \"\$1.jsx\"

if [ \$PREPEND != false ];
then
  echo \"import \$1 from './\$1';\" | cat - ./\$PREPEND.jsx > temp && mv temp ./\$PREPEND.jsx
fi

" > ./bin/generate-component.sh

echo  "#!/usr/bin/env bash

git config user.name \"\$1\"
git config user.email \"\$2\"
" > ./bin/git-config.sh

chmod 755 ./bin/*.sh

mkdir src
mkdir src/components

git init
npm init -y
npm install

npm run gen App

echo "//Autogenerated by @xamdes/project-generator
import 'bootstrap/dist/css/bootstrap.min.css';
import App from './components/App';
import { AppContainer } from 'react-hot-loader';
import { HashRouter } from 'react-router-dom';

const render = (Component) => {
  ReactDOM.render(
    <AppContainer>
      <HashRouter>
        <Component/>
      </HashRouter>
    </AppContainer>,
    document.getElementById('react-app-root')
  );
};

render(App);

if (module.hot) {
  module.hot.accept('./components/App', () => {
    render(App);
  });
}
" > ./src/index.jsx

echo "# Autogenerated by @xamdes/project-generator
.DS-STORE
node_modules
build
# End of Default
" > .gitignore

echo "MIT License

Copyright (c) [Year] [First Last]

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the \"Software\"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
" > LICENSE

touch README.md

echo "<!DOCTYPE html>
<head>
  <meta charset=\"utf-8\">
  <title><%= htmlWebpackPlugin.options.title %></title>
</head>
  <body>
    <% if (htmlWebpackPlugin.options.appMountId) { %>
      <div id=\"<%= htmlWebpackPlugin.options.appMountId%>\"></div>
    <% } %>
  </body>
</html>
" > template.ejs

echo "// Autogenerated by @xamdes/project-generator
const webpack = require('webpack');
const { resolve } = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const UglifyJsPlugin = require('uglifyjs-webpack-plugin');
require('@babel/polyfill');

const configApiUrl = '';

module.exports = [{
  name: 'production',
  //development, production or none
  mode: 'production',

  entry: [
    '@babel/polyfill', './src/index.jsx',
    'react-hot-loader/patch',
    resolve(__dirname, 'src') + '/index.jsx'
  ],

  output: {
    filename: 'app.bundle.js',
    path: resolve(__dirname, 'build'),
    publicPath: ''
  },

  resolve: {
    extensions: ['.js', '.jsx']
  },

  optimization: {
    minimizer: [
      new UglifyJsPlugin({
        parallel: true,
        uglifyOptions: {
          drop_console: true,
          keep_infinity: true,
          mangle: true,
          passes: 5,
          warnings: false
        }
      })
    ]
  },

  performance: {
    maxEntrypointSize: 512000,
    maxAssetSize: 512000
  },

  plugins: [
    new webpack.ProvidePlugin({
      $: 'jquery',
      jQuery: 'jquery',
      React: 'react',
      ReactDOM: 'react-dom',
      PropTypes: 'prop-types'
    }),
    new webpack.DefinePlugin({
      APINAME: JSON.stringify(configApiUrl)
    }),
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NamedModulesPlugin(),
    new HtmlWebpackPlugin({
      template:'template.ejs',
      appMountId: 'react-app-root',
      title: '$1',
      filename: resolve(__dirname, 'build', 'index.html'),
    }),
  ],

  module: {
    rules: [
      {
        test: /\.jsx?$/,
        enforce: 'pre',
        loader: 'eslint-loader',
        exclude: /node_modules/,
        options: {
          emitWarning: true,
          configFile: './.eslintrc.json'
        }
      },
      {
        test: /\.jsx?$/,
        loader: 'babel-loader',
        exclude: /node_modules/,
        options: {
          presets: [
            '@babel/preset-react',
            '@babel/preset-env'
          ],
          plugins: [
            'react-hot-loader/babel',
            'styled-jsx/babel'
          ]
        }
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader']
      }
    ],
  }

},{
  name: 'dev-server',
  //development, production or none
  mode: 'development',

    entry: [
    '@babel/polyfill', './src/index.jsx',
    'react-hot-loader/patch',
    'webpack-dev-server/client?http://localhost:8080',
    'webpack/hot/only-dev-server',
    resolve(__dirname, 'src') + '/index.jsx'
  ],

  output: {
    filename: 'app.bundle.js',
    path: resolve(__dirname, 'build'),
    publicPath: ''
  },

  resolve: {
    extensions: ['.js', '.jsx']
  },

  devtool: 'eval-source-map',

  devServer: {
    hot: true,
    contentBase: resolve(__dirname, 'build'),
    publicPath: '/',
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Headers': '*',
    },
    proxy: {
      '/default': {
        target: configApiUrl,
        secure: false,
        changeOrigin: true
      }

    }
  },

  plugins: [
    new webpack.ProvidePlugin({
      $: 'jquery',
      jQuery: 'jquery',
      React: 'react',
      ReactDOM: 'react-dom',
      PropTypes: 'prop-types'
    }),
    new webpack.DefinePlugin({
      APINAME: JSON.stringify('')
    }),
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NamedModulesPlugin(),
    new HtmlWebpackPlugin({
      template:'template.ejs',
      appMountId: 'react-app-root',
      title: '$1',
      filename: resolve(__dirname, 'build', 'index.html'),
    }),
  ],

  module: {
    rules: [
      {
        test: /\.jsx?$/,
        enforce: 'pre',
        loader: 'eslint-loader',
        exclude: /node_modules/,
        options: {
          emitWarning: true,
          configFile: './.eslintrc.json'
        }
      },
      {
        test: /\.jsx?$/,
        loader: 'babel-loader',
        exclude: /node_modules/,
        options: {
          presets: [
            '@babel/preset-react',
            '@babel/preset-env'
          ],
          plugins: [
            'react-hot-loader/babel',
            'styled-jsx/babel'
          ]
        }
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader']
      }
    ],
  }

}];
" > webpack.config.js

echo "{
  \"globals\": {
    \"ReactDOM\": true,
    \"$\": true,
    \"jQuery\": true,
    \"Popper\": true,
    \"React\": true,
    \"PropTypes\": true
  },
  \"env\": {
    \"browser\": true,
    \"es6\": true,
    \"amd\": true,
    \"node\": true
  },
  \"extends\": [\"eslint:recommended\",
    \"plugin:react/recommended\"
  ],
  \"parserOptions\": {
    \"ecmaFeatures\": {
      \"jsx\": true
    },
    \"ecmaVersion\": 2018,
    \"sourceType\": \"module\"
  },
  \"plugins\": [
    \"react\"
  ],
  \"rules\": {
    \"react/jsx-handler-names\": 2,
    \"react/require-render-return\": 2,
    \"react/no-unused-state\": 2,
    \"react/prefer-stateless-function\": 2,
    \"react/no-direct-mutation-state\": 2,
    \"react/jsx-key\": 2,
    \"react/jsx-uses-vars\": 2,
    \"react/jsx-uses-react\": 2,
    \"react/jsx-no-duplicate-props\": 2,
    \"react/jsx-no-undef\": 2,
    \"react/no-multi-comp\": 2,
    \"react/jsx-indent-props\": [
      \"error\",
      2
    ],
    \"react/jsx-pascal-case\": 2,
    \"react/prop-types\": 2,
    \"react/jsx-indent\": [
      \"error\",
      2
    ],
    \"indent\": [
      \"error\",
      2
    ],
    \"linebreak-style\": [
      \"error\",
      \"unix\"
    ],
    \"quotes\": [
      \"error\",
      \"single\"
    ],
    \"semi\": [
      \"error\",
      \"always\"
    ],
    \"no-unused-vars\": 1
  }
}
" > .eslintrc.json


echo "# Autogenerated by @xamdes/project-generator
# Component Guide
## Use as Needed
* import PropTypes from 'prop-types';
* import styled from 'styled-components';

## Prop Type Examples

\`\`\`
[component-name].propTypes = {
 [variable-name]: PropTypes.string,
};
\`\`\`

exampleArray: PropTypes.array,
exampleBoolean: PropTypes.bool,
exampleFunction: PropTypes.func,
exampleNumber: PropTypes.number,
exampleObject: PropTypes.object,
exampleString: PropTypes.string,
exampleSymbol: PropTypes.symbol,
exampleReactElement: PropTypes.element,
exampleArrayOfNumbers: PropTypes.arrayOf(PropTypes.number),
exampleArrayOfStrings: PropTypes.arrayOf(PropTypes.string),
exampleClassTypeProp: PropTypes.instanceOf(ExampleClassName),
optionalEnum: PropTypes.oneOf(['ExampleClass', 'AnotherExampleClass']),

## Styled Examples

\`\`\`
<Main className=\"card\">
  <ButtonTest className=\"btn\"Test</ButtonTest
</Main>
\`\`\`
\`\`\`
const ButtonTest = styled.button\`
  background-color: red;
  &:hover \${ButtonTest}
  {
    background-color: teal;
  }
\`;
\`\`\`
\`\`\`
const Main = styled.div\`
  background-color: #ecf0f1;
  font-family: sans-serif;
  padding-top: 50px;
  \`
;
\`\`\`

## Stateless Example

\`\`\`
function ExampleFunctionalComponent(props){
  return (
    <div>
      <h1>I am a standard functional component!</h1>
      <p>Here are props I receive from my parent:</p>
      <ul>
        <li>{props.examplePropOne}</li>
        <li>{props.examplePropTwo}</li>
      </ul>
    </div>
  );
}

export default ExampleFunctionalComponent;
\`\`\`

### Class Example

\`\`\`
class ExampleClassComponent extends React.Component {
  render() {
    return (
        <div>
          <h1>I am a stateful, class-based component!</h1>
          <p>These are props sent by my parent component:</p>
          <ul>
            <li>{this.props.examplePropOne}</li>
            <li>{this.props.examplePropTwo}</li>
         </ul>
       </div>
    );
  }
}

export default ExampleClassComponent;
\`\`\`
" > ./src/components/README.md

echo "*.md
" > .eslintignore

echo "# $1

## Author(s)

  * Jane Doe

## Install

\`\`\`
  git clone https://github.com/[github-username]/$1.git
  cd $1
  npm install
\`\`\`

## Instructions

* npm run fresh
  * installs packages from package.json and run webpack
* npm run gen [component-name] [optional-component]
  * generates a component bast on given component name
  * puts component in ./src/components/ directory
  * will prepend imput in a component file
  * npm run gen App Header
    * puts import Header from './Header'; into App component
* npm run commit '[message]'
  * runs git commit -m using npm
* npm run git-cinfig '[name]' '[email]'
  * configures local git username and email
* npm run start
  * starts webpack-dev-server
  * http://localhost:8080
* npm run start-web
  * starts webpack-dev-server and opens http://localhost:8080 in browser (Chrome)
* npm run web
  * opens http://localhost:8080
* npm run lint
  * runs eslint on files in ./src/
* npm run lint-fix
  * runs eslint and tells it to attempt to fix errors in files located in ./src/

## Specifications

## Autogenerated Notes

**React Project Created using @xamdes/project-generator**
**Used Command: npx -p @xamdes/project-generator -c 'create-react-[mac/win] $1'**
**Latest Project Generator Notes can be found at https://www.npmjs.com/package/@xamdes/project-generator**


" > README.md
